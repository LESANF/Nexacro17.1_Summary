clearData - Column 정보 이외에 모든 데이터(row)를 삭제, 삭제된 데이터(row)의 갯수를 반환.
rowCount - 해당 Dataset의 row 개수를 반환
getRowType - 필터링 되어 보이지 않는 Row를 제외한 범위에서 지정된 row의 type을 반환
Dataset.ROWTYPE_INSERT: 2, Dataset.ROWTYPE_UPDATE: 4, Dataset.ROWTYPE_DELETE: 8 ( Row 타입을 표시하는 상수는 아래의 값으로 처리됨
rowPositon - 현재 선택된 데이터의 Row 인덱스를 갖는 속성
addRow는 맨밑에 부터 row추가 InsertRow는 위부터
setColumn - Column 값을 변경하는 메소드 
this.Dataset00.setColumn(nRow, nColldx || strCollD, varVal) / 
nRow - 값을 변경하려는 Column의 row 인덱스를 설정함. 
nColldx - 값을 변경하려는 Column의 인덱스 설정
strCollD - 값을 변경하려는 Column의 ID를 설정
varVal - 병경하려는 Column의 값을 설정
getColiD(nColldx) - Dataset에서 전달된 인덱스에 해당하는 Column의 ID를 반환하는 메소드
nColldx는 number고 ID를 구하려는 Column의 인덱스를 설정 
addColumn(strColID, strColType, [,nColSize]) - Dataset에 Column을 추가하는 메소드
strColID - DataSet에 추가할 Column의 ID를 문자열로 설정
strColType - Dataset에 추가할 Column의 타입을 설정
nColSize - DataSet에 추가할 Column의 데이터 길이를 설정 값을 생략하면 "256"으로 적용
getOrgColumn(nRow, nColIdx || strColID) - 필터링되어 보이지 않는 Row를 제외한 범위에서 지정한 Row와 Column의 초기값을 반환하는 메소드
nRow - number형, 초기값을 구하려는 Row의 인덱스를 설정.
nColIdx - number형, 초기값을 구하려는 Column의 인덱스를 설정.
strColId - String형, 초기값을 구하려는 Column의 ID를 설정.


this.Button00_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
    this.Dataset00.deleteRow(this.Dataset00.rowposition) // 선택된 row를 지움
};

this.Button02_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
        this.Dataset00.addRow(); // 아래부터 row를 하나 추가
};

this.Button01_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
    this.Dataset01.addColumn("COL_TYPE", "STRING"); // COL_TYPE이라는 하나의 속성 생성함. ( ID / type )
    for(var i=0;i<this.Dataset00.colcount;i++) // Dataset00의 속성을 긁어옴 colcount는 column의 갯수를 읽는거임
    {
        this.Dataset01.addColumn(this.Dataset00.getColID(i), "STRING"); // 이부분이 긁어온 Dataset00의 ID를 가져옴 
    }																	// getColID는 index를 매개변수로 받고 해당하는 행에 ID를 가져옴
    this.fn_orgDataset(); // 윗부분까지 하고 끝내려면 createFormat을 붙이고 끝내면되지만, 우리가 원하는결과물이 아님. fn_orgDataset 함수를 실행
};

this.fn_orgDataset = function() // fn_orgDataset 으로 함수 선언
{
    var sOrgCol = ""; // sOrgCol 변수 선언
    var sOrgVal = ""; // sOrgVal 변수 선언
    
	this.Dataset01.clearData(); // 모든 row를 삭제함. 복구못함 복구하고싶으면 deleteAll을 사용.
    
    for (var i = 0; i < this.Dataset00.rowcount; i++)  // Dataset00의 row의 개수만큼 반복함
    {
        var nRowType = this.Dataset00.getRowType(i); // nRowType 변수를 생성하고 담기는건 Dataset00의 각행들의 Type임
        if (nRowType == Dataset.ROWTYPE_INSERT || nRowType == Dataset.ROWTYPE_UPDATE) // INESRT는 == 2, UPDATE는 == 4를 의미.
        {
            this.Dataset01.addRow(); // execute로 실행될 grid에 row하나 추가
            this.Dataset01.setColumn(this.Dataset01.rowposition, "COL_TYPE", nRowType); // rowPosition(현재위치)에서 "COL_TYPE" ID의 값을 nRowType으로 설정
            for (var j = 0; j < this.Dataset00.colcount; j++)  // 위는 새롭게 만들어진 COL_TYPE에 대한 값을 넣는 부분, 여기는 Dataset00의 값을 긁어오는거
            {
                sOrgCol = this.Dataset00.getColID(j); // getColID는 매개변수로 number를 받고 해당하는 index의 Column ID를 가져옴 이중 for문이니주의 0,0-1-2-3, 1,0-1-2-3...
				sOrgVal = this.Dataset00.getOrgColumn(i, sOrgCol); // getOrgColumn은 지정한 row와 column의 초기값을 반환하는 메소드
				// 초기값을 반환하기때문에 INSERT, UPDATE로 작업이 이루어진 부분만 EXECUTE로 값이 나옴.
				console.log(sOrgCol, sOrgVal);
				// CODE A, CODE B, DATA 1, DATA 2 이런식으로 나옴 sOrgCol은 CODE, DATA즉 ID만 가져오고 sOrgVal은 그 id로 값을 가져옴
                this.Dataset01.setColumn(this.Dataset01.rowposition, sOrgCol, sOrgVal); // rowPostion에서 sOrgCol(CODE,DATA) ID값을 sOrgVal로 바꾼다는말
            }
        }
    }
    
    trace(this.Dataset00.getDeletedRowset().length); // DELETE됐을때, 위는 INSERT, UPDATE
    for (var i = 0; i < this.Dataset00.getDeletedRowCount(); i++) 
    {
        this.Dataset01.addRow();
        this.Dataset01.setColumn(this.Dataset01.rowposition, "COL_TYPE", Dataset.ROWTYPE_DELETE);
        for (var j = 0; j < this.Dataset00.colcount; j++) 
        {
            sOrgCol = this.Dataset00.getColID(j);
            sOrgVal = this.Dataset00.getDeletedColumn(i, sOrgCol);
            this.Dataset01.setColumn(this.Dataset01.rowposition, sOrgCol, sOrgVal);
        }
    }
    
    this.Grid01.createFormat(); // 그리드를 동적으로 데이터를 바꿔주면 무조건 createFormat을 해줘야함.
};