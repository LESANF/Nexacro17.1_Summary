https://www.playnexacro.com/#show:techtip:413 - 넥사 단축키
http://docs.tobesoft.com/developer_guide_nexacro_17_ko#95c557bf254408db - 넥사 활용북
http://docs.tobesoft.com/developer_guide_nexacro_17_ko#32d7381dc6dc1f6d - DataSet, Data Binding

< 데이터 셋 (Dataset) >

Dataset은 데이터베이스 자원을 효율적으로 활용하고자 도입된 개념.
한정적인 데이터베이스 자원에 다수 사용자의 지속적인 연결로 인해 발생하는 오버헤드는 성능저하의 주 요인.
이를 해결하고자, 데이터베이스에 대한 지속적 연결없이 데이터 작업이 가능한 비연결지향 방식의 Dataset 사용

일반적으로 Dataset은 독자적으로 사용하지 않고, 데이터를 시각적으로 표현하는 컴포넌트에 바인딩하는 형태로 사용
Grid, Combo, ListBox 등의 컴포넌트는 화면에 보여주기 위한 형태만 가지고 있을 뿐 실제로 의미있는 데이터는 Dataset이 갖고있다.

< 데이터 바인딩(Data Binding) >

데이터 바인딩은 데이터 정보를 담고 있는 Dataset 오브젝트와 시각적으로 표현되는 컴포넌트 간에 데이터와 정보를 연결하고
상호 동기화하는 기법. 바인딩 기법은 그 사용 방법에 따라 다름의 네가지로 나눠볼 수 있음.

- Full Biding / Master & Detail Binding / Lookup Binding / Presentation Binding

FULL BINDING 
: Grid는 그 형태가 Dataset과 논리적으로 같은 컴포넌트다. 따라서 Grid는 Dataset과 완전히 맵핑됨.
이런 식으로 Dataset과 컴포넌트가 1대1로 완전히 맵핑될 수 있는 바인딩을 Full binding이라고 함.
Grid만이 Full binding이 가능

Master & Detail Binding
: Grid와 단일 데이터를 표시하는 컴포넌트 사이의 binding이다.
4개의 레코드가있는 Grid에서 하나의 레코드를 선택했을때, Edit 컴포넌트에 선택된 레코드가 입/출력 하는 경우가 이에 해당됨.

Lookup Binding
: 단일 데이터를 입/출력하는 컴포넌트가 내부에 또 다른 Dataset을 가지는 형태의 바인딩.
Grid의 레코드를 선택했을때 Combo 컴포넌트에 선택된 레코드의 특정 Column을 연결하고 Combo에 바인딩되어 있는 Dataset에서
그에 해당하는 값을 찾아 Combo에 출력하는 경우

Presentation Binding
: 컴포넌트에 출력하는 데이터에 스타일을 주는 용도의 바인딩 기법 

F1을 활용해서 각 컴포넌트들의 method를 많이 활용해야함.

워크북 예제를 하면서 getSum, getAvg등과 같이 비슷한 함수로 getCaseSum, getCaseAvg가 있다.
받는 매개변수는 비슷하며, Case의 경우 첫번째 인자로 조건표현식을 추가함.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

< Script 소스편집 >

Ctrl + ] : 현재 선택된 brace 매치되는 brace로 이동
Ctrl + Shift + ] : 현재 선택된 brace에 매치되는 brace로 커서가 이동하면서 이동영역 모두 선택
Ctrl + Shift + L : 커서위치 한 줄 삭제

< Component > 

/* 하나의 함수로 여러 컴포넌트에 돌려 쓰는방법 
버튼 2개 각각 id 1, 2라고 가정하고, Button_onclick함수를 하나 만든다.
this.alert(e.fromobject.id); 로 함수의 내용을 작성하면 어느버튼이던 이벤트를 사용할 수 있다.

fromobject란 이벤트 발생의 원인이 되는 컴포넌트를 갖는 속성임.
*/

/* 컴포넌트에 이벤트생성 할 때, 스크립트단에서 바로 하지말고 
Properties(alt+enter)에서 원하는 이벤트에 원하는 변수명 적고 엔터치면 스크립트 단에서 자동으로 생성됨. 
*/

Static - 화면에 일정한 문자열을 출력하기 위해 사용하는 컴포넌트

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Button - 사용자가 마우스를 클릭해서 지저한 스크립트를 수행하게 하는 컴포넌트
-> onclick 이벤트를 추가하여 함수 내부에서 js코드로 이벤트를 처리한다.
-> 아래의 onclick 함수는 nexacro에서 만들어줌 내부 내용을 내가 작성한거

this.Button00_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	console.log("hi");
};
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Edit - 한 줄의 문자열 입력 또는 출력하는 컴포넌트. 모든 문자열의 입력이 가능하며, 경우에 따라 원하는 문자열만 입력 받을 수 있음.
-> es6문법중 안먹히는게 몇개있음. ``(백틱)안됨 const, let써지길레 그냥 사용함
-> postvalue, posttext의 차이가 뭔진 모르겠는데 value가 익숙해서 그냥 value씀
-> test에 trace함수를 써서 해당 함수가달린 edit의 값을 test에 담았는데 저 한줄만으로 console에 로그가찍힘. 따로 console.log출력 문을 안써도됨.
-> trace는 값을 담는 개념은 아닌거같음.
-> http://docs.tobesoft.com/nexacro_technical_note_ko#c24f3f4b1a2690e1 - Edit/MaskEdit 의 값을 바로 바인드 시켜서 담는거 같은데 값넘길때 이렇게 하면될거같음.

this.EditTest_onchanged = function(obj:nexacro.Edit,e:nexacro.ChangeEventInfo)
{
	const test = trace(e.postvalue);
	const test2 = "hi";
	let test3 = ['1,','2',3];
	
	console.log(test2);
	console.log("안녕하세요" + test2);
	console.log(test3[2]);
	
};

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
MaskEdit - 정해진 형식으로 입/출력할 때 사용하는 Edit 계열의 컴포넌트. 
사용법은 Edit과 유사하며 형식이 정해져있는 주민등록번호, 전화번호, 날짜 같은정보에 유용하다.
패스워드 처리가 가능하며 brace로 감싸면 Asterisk로 대체되어 출력됨 ( format에 ######-#{######} 이런식으로하면 주민번호가 940808-1****** 이렇게 출력 )

type에는 String, Number 형식이있다. format을 이용해 미리 입력받을 수 있는데, 문자형(알파벳)은 a, 숫자형은 #으로 처리할 수 있음. -(하이픈)도 처리가능
예를 들어, type = String에서 aaaaaa-###### 이런식으로 format을 정해놓으면, qwerty-123456 이렇게 입력받을 수 있음. 입력하기전은 _ _ _ _ _ _ - _ _ _ _ _ _ 이렇게 표기.
그리고 number 형으로가서 위와같이 하면 알파벳이 입력이안됨. 숫자만 입력가능.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TextArea - 여러 줄로 된 문자열을 입력 또는 출력하는 컴포넌트.
-> Dataset을 1개의 하나의 요소(Column)을 연결시킬 수 있다. value형태로 들어간다.
-> readonly 옵션을 true로 주면, 읽기만됨 수정커서 안뜸.  
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Calender는 날짜와 시간을 입력하는 컴포넌트이며 월 단위로 보고 선택하는 방식과 직접 입력하는 방식 등이 가능하며, 입력한 날짜가 정확한 날짜인지 체크 된다.